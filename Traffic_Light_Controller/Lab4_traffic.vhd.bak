library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity Lab4_traffic is
port(
button_in : in std_logic;
reset : in std_logic;
Light1_Green : out std_logic;
Light1_Yellow : out std_logic;
Light1_Red : out std_logic;
Light2_Green : out std_logic;
Light2_Yellow : out std_logic;
Light2_Red : out std_logic;
Light3_Green : out std_logic;
Light3_Yellow : out std_logic;
Light3_Red : out std_logic
);
end entity;

architecture rtl of Lab4_traffic is
--Why do we not need a Red states?
type lights_state is (Straight_Green, Straight_Yellow, T_Green, T_Yellow);
signal State : lights_state;
begin
process(button_in) is
begin
if rising_edge(button_in) then
if reset = '0' then
-- set things to Straight_Green to reset
State <= Straight_Green;
Light1_Green <= '1';
Light1_Yellow <= '0';
Light1_Red <= '0';
Light2_Green <= '0';
Light2_Yellow <= '0';
Light2_Red <= '1';
Light3_Green <= '1';
Light3_Yellow <= '0';
Light3_Red <= '0';
else
Light1_Green <= '0';
Light1_Yellow <= '0';
Light1_Red <= '0';
Light2_Green <= '0';
Light2_Yellow <= '0';
Light2_Red <= '0';
Light3_Green <= '0';
Light3_Yellow <= '0';
Light3_Red <= '0';
case State is
when Straight_Green =>
Light1_Green <= '?';
Light1_Yellow <= '?';
Light1_Red <= '?';
Light2_Green <= '?';
Light2_Yellow <= '?';
Light2_Red <= '?';
Light3_Green <= '?';
Light3_Yellow <= '?';
Light3_Red <= '?';
State <= Straight_Yellow;
â€“you complete the rest of the states and value assignments
end case;
end if;
end if;
end process;
end architecture;
